{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/client-form/client-form.component.css","webpack:///./src/app/client-form/client-form.component.html","webpack:///./src/app/client-form/client-form.component.ts","webpack:///./src/app/clients-list/clients-list.component.css","webpack:///./src/app/clients-list/clients-list.component.html","webpack:///./src/app/clients-list/clients-list.component.ts","webpack:///./src/app/clients.service.ts","webpack:///./src/app/http-requests-helper.service.ts","webpack:///./src/app/service-interceptor.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<h1>{{title}}</h1>\\n<app-clients-list></app-clients-list>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Angular/Mongo Test';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { ClientFormComponent } from './client-form/client-form.component';\nimport { ClientsListComponent } from './clients-list/clients-list.component';\n\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ServiceInterceptor } from './service-interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ClientFormComponent,\n    ClientsListComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: ServiceInterceptor,\n    multi: true\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<p>\\n  client-form works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Client } from '../client';\nimport { ClientsService } from '../clients.service';\n\n@Component({\n  selector: 'app-client-form',\n  templateUrl: './client-form.component.html',\n  styleUrls: ['./client-form.component.css']\n})\nexport class ClientFormComponent implements OnInit {\n\n  constructor(clientsService: ClientsService) { }\n\n  clients: Client[];\n\n  ngOnInit() {\n\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h1>Clients List</h1>\\n<ul>\\n  <li *ngFor=\\\"let client of clients\\\"> {{ client.name }} </li>\\n</ul>\"","import { Component, OnInit } from '@angular/core';\nimport { ClientsService } from '../clients.service';\nimport { Client } from '../client';\n\n@Component({\n  selector: 'app-clients-list',\n  templateUrl: './clients-list.component.html',\n  styleUrls: ['./clients-list.component.css']\n})\nexport class ClientsListComponent implements OnInit {\n\n  constructor(private clientsService: ClientsService) { }\n\n  clients: Client[];\n  client: Client;\n\n  getAll(): void {\n    this.clientsService.getAll()\n      .subscribe(\n        clients => { this.clients = clients }      \n      )\n  }\n\n  getById(id: number): void {\n    this.clientsService.getById(id)\n      .subscribe(\n        client => { this.client = client[0] }\n      )\n  }\n\n  Find(filter: string): void {\n    this.clientsService.Find(filter)\n      .subscribe(\n        clients => { this.clients = clients }      \n      )\n  }\n\n  ngOnInit() {\n    this.getAll();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Client } from './client';\nimport { HttpParams } from '@angular/common/http/src/params';\nimport { HttpParamsOptions } from '@angular/common/http/src/params';\nimport { HttpRequestsHelperService } from './http-requests-helper.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientsService {\n\n  private url = this.helper.getBaseUrl() + 'Api/Client/';\n  \n  getAll(): Observable<Client[]> {    \n    return this.http.get<Client[]>(this.url + 'GetAll')\n      .pipe(\n        catchError(this.handleError('getClients', []))\n      )\n  }\n\n  getById(id: number): Observable<Client[]> {    \n    return this.http.get<Client[]>(this.url + 'GetById/' + id)\n      .pipe(\n        catchError(this.handleError('getById', []))\n      )\n  }\n\n  Find(filter: string): Observable<Client[]> {    \n    // TODO: armar params\n    let formattedFilter;\n    return this.http.get<Client[]>(this.url + 'Get/' + formattedFilter)\n      .pipe(\n        catchError(this.handleError('Find', []))\n      )\n  }\n\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n  \n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n  \n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n  \n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n  constructor(\n    private http: HttpClient,\n    private helper: HttpRequestsHelperService\n  ) { }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpRequestsHelperService {\n\n  getBaseUrl() :string {\n    return 'http://localhost:8005/';\n  }\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { HttpHeaders } from '@angular/common/http/src/headers';\r\n\r\n/** Pass untouched request through to the next request handler. */\r\n@Injectable()\r\nexport class ServiceInterceptor implements HttpInterceptor {\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler):\r\n    Observable<HttpEvent<any>> {\r\n        req.clone({\r\n            headers: req.headers.set('Content-Type', 'application/json')\r\n        });\r\n        return next.handle(req);\r\n  }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}